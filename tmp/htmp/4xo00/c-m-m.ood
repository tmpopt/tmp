#include <iostream>
#include <cuda.h>

#define N 2

__global__ void matrixMultiplication(int* A, int* B, int* C)
{
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int k = 0; k < N; k++) {
            sum += A[row * N + k] * B[k * N + col];
        }
        C[row * N + col] = sum;
    }
}

int main()
{
    int A[N][N], B[N][N], C[N][N];
    int *dev_A, *dev_B, *dev_C;

    // Input matrices A and B from the user
    std::cout << "Enter matrix A (2x2):\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cin >> A[i][j];
        }
    }

    std::cout << "Enter matrix B (2x2):\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cin >> B[i][j];
        }
    }

    // Allocate memory on the device
    cudaMalloc((void**)&dev_A, N * N * sizeof(int));
    cudaMalloc((void**)&dev_B, N * N * sizeof(int));
    cudaMalloc((void**)&dev_C, N * N * sizeof(int));

    // Copy matrices A and B from host to device
    cudaMemcpy(dev_A, A, N * N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B, B, N * N * sizeof(int), cudaMemcpyHostToDevice);

    // Define block and grid dimensions
    dim3 blockDims(N, N);
    dim3 gridDims(1, 1);

    // Launch the matrix multiplication kernel
    matrixMultiplication<<<gridDims, blockDims>>>(dev_A, dev_B, dev_C);

    // Copy the result matrix C from device to host
    cudaMemcpy(C, dev_C, N * N * sizeof(int), cudaMemcpyDeviceToHost);

    // Print the result matrix C
    std::cout << "Matrix C = A * B:\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cout << C[i][j] << " ";
        }
        std::cout << "\n";
    }

    // Free memory on the device
    cudaFree(dev_A);
    cudaFree(dev_B);
    cudaFree(dev_C);

    return 0;
}
